local util = require("config.util")
return {
  -- -- Use <tab> for completion and snippets (supertab)
  -- -- first: disable default <tab> and <s-tab> behavior in LuaSnip
  -- {
  "L3MON4D3/LuaSnip",
  --
  --   config = function()
  --     -- re "configs.luasnip"
  --     local ls = require("luasnip")
  --     local types = require("luasnip.util.types")
  --     local ext_util = require("luasnip.util.ext_opts")
  --     local ft_functions = require("luasnip.extras.filetype_functions")
  --     local session = require("luasnip.session")
  --     local iNode = require("luasnip.nodes.insertNode")
  --     local cNode = require("luasnip.nodes.choiceNode")
  --
  --     -- Inserts a insert(1) before all other nodes, decreases node.pos's as indexing is "wrong".
  --     local function modify_nodes(snip)
  --       for i = #snip.nodes, 1, -1 do
  --         snip.nodes[i + 1] = snip.nodes[i]
  --         local node = snip.nodes[i + 1]
  --         if node.pos then
  --           node.pos = node.pos + 1
  --         end
  --       end
  --       snip.nodes[1] = iNode.I(1)
  --     end
  --
  --     ls.add_snippets("all", {
  --       ls.parser.parse_snippet("func", "function ${1}(${2}) \n{\n\t${3}\n}"),
  --     })
  --     ls.config.setup({
  --       history = false,
  --       update_events = "InsertLeave",
  --       -- see :h User, event should never be triggered(except if it is `doautocmd`'d)
  --       -- region_check_events = "User None",
  --       -- delete_check_events = "User None",
  --       store_selection_keys = nil, -- Supossed to be the same as the expand shortcut
  --       ext_opts = {
  --         [types.textNode] = {
  --           active = { hl_group = "LuasnipTextNodeActive" },
  --           passive = { hl_group = "LuasnipTextNodePassive" },
  --           visited = { hl_group = "LuasnipTextNodeVisited" },
  --           unvisited = { hl_group = "LuasnipTextNodeUnvisited" },
  --           snippet_passive = { hl_group = "LuasnipTextNodeSnippetPassive" },
  --         },
  --         [types.insertNode] = {
  --           active = { hl_group = "LuasnipInsertNodeActive" },
  --           passive = { hl_group = "LuasnipInsertNodePassive" },
  --           visited = { hl_group = "LuasnipInsertNodeVisited" },
  --           unvisited = { hl_group = "LuasnipInsertNodeUnvisited" },
  --           snippet_passive = {
  --             hl_group = "LuasnipInsertNodeSnippetPassive",
  --           },
  --         },
  --         [types.exitNode] = {
  --           active = { hl_group = "LuasnipExitNodeActive" },
  --           passive = { hl_group = "LuasnipExitNodePassive" },
  --           visited = { hl_group = "LuasnipExitNodeVisited" },
  --           unvisited = { hl_group = "LuasnipExitNodeUnvisited" },
  --           snippet_passive = { hl_group = "LuasnipExitNodeSnippetPassive" },
  --         },
  --         [types.functionNode] = {
  --           active = { hl_group = "LuasnipFunctionNodeActive" },
  --           passive = { hl_group = "LuasnipFunctionNodePassive" },
  --           visited = { hl_group = "LuasnipFunctionNodeVisited" },
  --           unvisited = { hl_group = "LuasnipFunctionNodeUnvisited" },
  --           snippet_passive = {
  --             hl_group = "LuasnipFunctionNodeSnippetPassive",
  --           },
  --         },
  --         [types.snippetNode] = {
  --           active = { hl_group = "LuasnipSnippetNodeActive" },
  --           passive = { hl_group = "LuasnipSnippetNodePassive" },
  --           visited = { hl_group = "LuasnipSnippetNodeVisited" },
  --           unvisited = { hl_group = "LuasnipSnippetNodeUnvisited" },
  --           snippet_passive = {
  --             hl_group = "LuasnipSnippetNodeSnippetPassive",
  --           },
  --         },
  --         [types.choiceNode] = {
  --           active = { hl_group = "LuasnipChoiceNodeActive" },
  --           passive = { hl_group = "LuasnipChoiceNodePassive" },
  --           visited = { hl_group = "LuasnipChoiceNodeVisited" },
  --           unvisited = { hl_group = "LuasnipChoiceNodeUnvisited" },
  --           snippet_passive = {
  --             hl_group = "LuasnipChoiceNodeSnippetPassive",
  --           },
  --         },
  --         [types.dynamicNode] = {
  --           active = { hl_group = "LuasnipDynamicNodeActive" },
  --           passive = { hl_group = "LuasnipDynamicNodePassive" },
  --           visited = { hl_group = "LuasnipDynamicNodeVisited" },
  --           unvisited = { hl_group = "LuasnipDynamicNodeUnvisited" },
  --           snippet_passive = {
  --             hl_group = "LuasnipDynamicNodeSnippetPassive",
  --           },
  --         },
  --         [types.snippet] = {
  --           active = { hl_group = "LuasnipSnippetActive" },
  --           passive = { hl_group = "LuasnipSnippetPassive" },
  --           -- not used!
  --           visited = { hl_group = "LuasnipSnippetVisited" },
  --           unvisited = { hl_group = "LuasnipSnippetUnvisited" },
  --           snippet_passive = { hl_group = "LuasnipSnippetSnippetPassive" },
  --         },
  --         [types.restoreNode] = {
  --           active = { hl_group = "LuasnipRestoreNodeActive" },
  --           passive = { hl_group = "LuasnipRestoreNodePassive" },
  --           visited = { hl_group = "LuasnipRestoreNodeVisited" },
  --           unvisited = { hl_group = "LuasnipRestoreNodeUnvisited" },
  --           snippet_passive = {
  --             hl_group = "LuasnipRestoreNodeSnippetPassive",
  --           },
  --         },
  --       },
  --       ext_base_prio = 200,
  --       ext_prio_increase = 9,
  --       enable_autosnippets = false,
  --       -- default applied in util.parser, res iNode, cNode
  --       -- (Dependency cycle if here).
  --       parser_nested_assembler = function(pos, snip)
  --         modify_nodes(snip)
  --         snip:init_nodes()
  --         snip.pos = nil
  --
  --         return cNode.C(pos, { snip, iNode.I(nil, { "" }) })
  --       end,
  --       -- Function expected to return a list of filetypes (or empty list)
  --       ft_func = ft_functions.from_filetype,
  --       -- fn(bufnr) -> string[] (filetypes).
  --       load_ft_func = ft_functions.from_filetype_load,
  --       -- globals injected into luasnippet-files.
  --       snip_env = {
  --         s = require("luasnip.nodes.snippet").S,
  --         sn = require("luasnip.nodes.snippet").SN,
  --         isn = require("luasnip.nodes.snippet").ISN,
  --         t = require("luasnip.nodes.textNode").T,
  --         i = require("luasnip.nodes.insertNode").I,
  --         f = require("luasnip.nodes.functionNode").F,
  --         c = require("luasnip.nodes.choiceNode").C,
  --         d = require("luasnip.nodes.dynamicNode").D,
  --         r = require("luasnip.nodes.restoreNode"),
  --         events = require("luasnip.util.events"),
  --         ai = require("luasnip.nodes.absolute_indexer"),
  --         extras = require("luasnip.extras"),
  --         l = require("luasnip.extras").lambda,
  --         rep = require("luasnip.extras").rep,
  --         p = require("luasnip.extras").partial,
  --         m = require("luasnip.extras").match,
  --         n = require("luasnip.extras").nonempty,
  --         dl = require("luasnip.extras").dynamic_lambda,
  --         fmt = require("luasnip.extras.fmt").fmt,
  --         fmta = require("luasnip.extras.fmt").fmta,
  --         conds = require("luasnip.extras.expand_conditions"),
  --         postfix = require("luasnip.extras.postfix").postfix,
  --         types = require("luasnip.util.types"),
  --         parse = require("luasnip.util.parser").parse_snippet,
  --       },
  --     })
  --
  --     vim.tbl_map(function(type)
  --       require("luasnip.loaders.from_" .. type).lazy_load()
  --     end, { "vscode", "snipmate", "lua" })
  --   end,
  dependencies = {
    -- {
    "rafamadriz/friendly-snippets",
    dev = util.hasRepoWithName("friendly-snippets"),
    dir = util.getRepoWithName("friendly-snippets"),
    -- config = function()
    --   require("luasnip.loaders.from_vscode").lazy_load()
    -- end,
    -- },
  },
  --   keys = function()
  --     return {}
  --   end,
}
